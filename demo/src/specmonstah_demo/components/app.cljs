(ns specmonstah-demo.components.app
  (:require [re-frame.core :as rf]
            [cljs.pprint :as pprint]
            [sweet-tooth.frontend.form.flow :as stff]
            [sweet-tooth.frontend.form.components :as stfc]
            [sweet-tooth.frontend.core.utils :as stcu]

            [specmonstah-demo.examples.queries :as queries]
            [specmonstah-demo.examples.schemas :as schemas]
            [specmonstah-demo.components.vendor.ace :as ace]
            [specmonstah-demo.components.vendor.vis :as vis]))

(defn pretty
  [x]
  (with-out-str (pprint/pprint x)))

(defn spec-gen
  "Show the attrs generated by spec"
  []
  [:div.spec-gen
   [:h2 "Generated Attributes"]
   [:p "The maps generated by clojure.spec for each ent"]
   [:div
    [ace/ace-readonly (pretty @(rf/subscribe [:query-result-attr-map])) {:width "100%"
                                                                         :height "400px"}]]])

(defn query-form
  []
  [:div.query
   [:h2 "Query"]
   [:p "The Specmonstah query is used to specify the data you want to generate"]
   (stfc/with-form [:query]
     [:form {:on-submit (stcu/prevent-default #(rf/dispatch [:submit-query]))}
      [input :ace :query {:height "100px"
                          :width  "100%"}]
      [:input {:type "submit" :value "Run"}]])
   [:h3 "More queries to try"]
   (->> queries/queries
        (map (fn [{:keys [name description query]}]
               [:li {:on-click (fn []
                                 (rf/dispatch [::stff/initialize-form [:query] {:buffer {:query (pretty query)}}])
                                 (rf/dispatch [:submit-query]))}
                [:strong name]
                [:div description]]))
        (into [:ul]))])

(defn app
  []
  [:div
   [:h1 "Specmonstah Demo"]
   [:p "Shows how a query and a schema combine to generate a graph of
   entities. clojure.spec is used to generate a map for each entity
   could be inserted in a database."]
   [:div.app
    [:div.input
     [query-form]
     [:div.schema
      [:h2 "Schema"]
      [:p "The :relations key specifies how entities of different types relate to eaach other."]
      [ace/ace-readonly
       schemas/todo-schema-txt
       {:width "100%"}]]]
    [:div.output
     [:div.graph
      [:h2 "Graph"]
      (if-let [db @(rf/subscribe [:query-result-db])]
        [vis/graph db {:options {:height "500px"}
                       :events  {:selectNode #(rf/dispatch [:select-node (-> % (js->clj :kewordize-keys true) (get "nodes") first)])}}]
        [:p "When you run a query a visualization will appear here"])]
     (when-let [node-details @(rf/subscribe [:selected-node-details])]
       [:div.node-spec-gen
        [:h2 "Spec generated map for selected ent"]
        [ace/ace-readonly (pretty node-details) {:width "100%"
                                                 :height "100px"}]])
     [spec-gen]]]])
